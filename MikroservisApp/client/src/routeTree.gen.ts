/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersImport } from './routes/users'
import { Route as RegisterImport } from './routes/register'
import { Route as PaymentsImport } from './routes/payments'
import { Route as LoginImport } from './routes/login'
import { Route as CalendarImport } from './routes/calendar'
import { Route as IndexImport } from './routes/index'
import { Route as TrainingsIndexImport } from './routes/trainings/index'
import { Route as CompetitionsIndexImport } from './routes/competitions/index'
import { Route as TrainingsIdImport } from './routes/trainings/$id'
import { Route as CompetitionsIdIndexImport } from './routes/competitions/$id/index'
import { Route as CompetitionsIdRegistrationImport } from './routes/competitions/$id/registration'

// Create/Update Routes

const UsersRoute = UsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const PaymentsRoute = PaymentsImport.update({
  id: '/payments',
  path: '/payments',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CalendarRoute = CalendarImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TrainingsIndexRoute = TrainingsIndexImport.update({
  id: '/trainings/',
  path: '/trainings/',
  getParentRoute: () => rootRoute,
} as any)

const CompetitionsIndexRoute = CompetitionsIndexImport.update({
  id: '/competitions/',
  path: '/competitions/',
  getParentRoute: () => rootRoute,
} as any)

const TrainingsIdRoute = TrainingsIdImport.update({
  id: '/trainings/$id',
  path: '/trainings/$id',
  getParentRoute: () => rootRoute,
} as any)

const CompetitionsIdIndexRoute = CompetitionsIdIndexImport.update({
  id: '/competitions/$id/',
  path: '/competitions/$id/',
  getParentRoute: () => rootRoute,
} as any)

const CompetitionsIdRegistrationRoute = CompetitionsIdRegistrationImport.update(
  {
    id: '/competitions/$id/registration',
    path: '/competitions/$id/registration',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/payments': {
      id: '/payments'
      path: '/payments'
      fullPath: '/payments'
      preLoaderRoute: typeof PaymentsImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersImport
      parentRoute: typeof rootRoute
    }
    '/trainings/$id': {
      id: '/trainings/$id'
      path: '/trainings/$id'
      fullPath: '/trainings/$id'
      preLoaderRoute: typeof TrainingsIdImport
      parentRoute: typeof rootRoute
    }
    '/competitions/': {
      id: '/competitions/'
      path: '/competitions'
      fullPath: '/competitions'
      preLoaderRoute: typeof CompetitionsIndexImport
      parentRoute: typeof rootRoute
    }
    '/trainings/': {
      id: '/trainings/'
      path: '/trainings'
      fullPath: '/trainings'
      preLoaderRoute: typeof TrainingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/competitions/$id/registration': {
      id: '/competitions/$id/registration'
      path: '/competitions/$id/registration'
      fullPath: '/competitions/$id/registration'
      preLoaderRoute: typeof CompetitionsIdRegistrationImport
      parentRoute: typeof rootRoute
    }
    '/competitions/$id/': {
      id: '/competitions/$id/'
      path: '/competitions/$id'
      fullPath: '/competitions/$id'
      preLoaderRoute: typeof CompetitionsIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/login': typeof LoginRoute
  '/payments': typeof PaymentsRoute
  '/register': typeof RegisterRoute
  '/users': typeof UsersRoute
  '/trainings/$id': typeof TrainingsIdRoute
  '/competitions': typeof CompetitionsIndexRoute
  '/trainings': typeof TrainingsIndexRoute
  '/competitions/$id/registration': typeof CompetitionsIdRegistrationRoute
  '/competitions/$id': typeof CompetitionsIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/login': typeof LoginRoute
  '/payments': typeof PaymentsRoute
  '/register': typeof RegisterRoute
  '/users': typeof UsersRoute
  '/trainings/$id': typeof TrainingsIdRoute
  '/competitions': typeof CompetitionsIndexRoute
  '/trainings': typeof TrainingsIndexRoute
  '/competitions/$id/registration': typeof CompetitionsIdRegistrationRoute
  '/competitions/$id': typeof CompetitionsIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/login': typeof LoginRoute
  '/payments': typeof PaymentsRoute
  '/register': typeof RegisterRoute
  '/users': typeof UsersRoute
  '/trainings/$id': typeof TrainingsIdRoute
  '/competitions/': typeof CompetitionsIndexRoute
  '/trainings/': typeof TrainingsIndexRoute
  '/competitions/$id/registration': typeof CompetitionsIdRegistrationRoute
  '/competitions/$id/': typeof CompetitionsIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/calendar'
    | '/login'
    | '/payments'
    | '/register'
    | '/users'
    | '/trainings/$id'
    | '/competitions'
    | '/trainings'
    | '/competitions/$id/registration'
    | '/competitions/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/calendar'
    | '/login'
    | '/payments'
    | '/register'
    | '/users'
    | '/trainings/$id'
    | '/competitions'
    | '/trainings'
    | '/competitions/$id/registration'
    | '/competitions/$id'
  id:
    | '__root__'
    | '/'
    | '/calendar'
    | '/login'
    | '/payments'
    | '/register'
    | '/users'
    | '/trainings/$id'
    | '/competitions/'
    | '/trainings/'
    | '/competitions/$id/registration'
    | '/competitions/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CalendarRoute: typeof CalendarRoute
  LoginRoute: typeof LoginRoute
  PaymentsRoute: typeof PaymentsRoute
  RegisterRoute: typeof RegisterRoute
  UsersRoute: typeof UsersRoute
  TrainingsIdRoute: typeof TrainingsIdRoute
  CompetitionsIndexRoute: typeof CompetitionsIndexRoute
  TrainingsIndexRoute: typeof TrainingsIndexRoute
  CompetitionsIdRegistrationRoute: typeof CompetitionsIdRegistrationRoute
  CompetitionsIdIndexRoute: typeof CompetitionsIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CalendarRoute: CalendarRoute,
  LoginRoute: LoginRoute,
  PaymentsRoute: PaymentsRoute,
  RegisterRoute: RegisterRoute,
  UsersRoute: UsersRoute,
  TrainingsIdRoute: TrainingsIdRoute,
  CompetitionsIndexRoute: CompetitionsIndexRoute,
  TrainingsIndexRoute: TrainingsIndexRoute,
  CompetitionsIdRegistrationRoute: CompetitionsIdRegistrationRoute,
  CompetitionsIdIndexRoute: CompetitionsIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/calendar",
        "/login",
        "/payments",
        "/register",
        "/users",
        "/trainings/$id",
        "/competitions/",
        "/trainings/",
        "/competitions/$id/registration",
        "/competitions/$id/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/calendar": {
      "filePath": "calendar.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/payments": {
      "filePath": "payments.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/users": {
      "filePath": "users.tsx"
    },
    "/trainings/$id": {
      "filePath": "trainings/$id.tsx"
    },
    "/competitions/": {
      "filePath": "competitions/index.tsx"
    },
    "/trainings/": {
      "filePath": "trainings/index.tsx"
    },
    "/competitions/$id/registration": {
      "filePath": "competitions/$id/registration.tsx"
    },
    "/competitions/$id/": {
      "filePath": "competitions/$id/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
